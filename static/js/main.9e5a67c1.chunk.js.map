{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","setData","username","setUsername","url","searchUsers","fetch","then","response","json","console","log","catch","error","className","src","logo","height","alt","type","onChange","ev","target","value","onKeyPress","key","placeholder","autoFocus","onClick","items","total_count","map","user","id","href","html_url","avatar_url","width","login","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,wLC2E5BC,MAtEf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAM,yCAqBZ,SAASC,IACPC,MAAM,GAAD,OAAIF,GAAJ,OAAUF,IACZK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAUR,EAAQQ,GAAOC,QAAQC,IAAIF,MAC1CG,OAAM,SAASC,GACdH,QAAQC,IAAIE,MAIlB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMC,OAAQ,GAAIC,IAAI,WAChC,6CAEF,yBAAKJ,UAAU,SACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,eAAeK,KAAK,OAAOC,SArCrC,SAAAC,GACflB,EAAYkB,EAAGC,OAAOC,QAoCkDC,WAjCvD,SAAAH,GACF,UAAXA,EAAGI,KACLpB,KA+B8FqB,YAAY,YAAYC,WAAS,IACzH,0BAAMb,UAAU,eAAec,QAASvB,OAI9C,yBAAKS,UAAU,WAEZd,GAAQA,EAAK6B,OACZ,6BACE,yBAAKf,UAAU,SAASd,EAAK8B,YAA7B,gBACA,wBAAIhB,UAAU,aAEVd,EAAK6B,MAAME,KAAI,SAAAC,GAAI,OACnB,uBAAGP,IAAKO,EAAKC,GAAInB,UAAU,WAAWoB,KAAMF,EAAKG,SAAUb,OAAO,UAChE,yBAAKP,IAAKiB,EAAKI,WAAYC,MAAO,GAAIpB,OAAQ,GAAIH,UAAU,WAC5D,0BAAMA,UAAU,YAAYkB,EAAKM,gBCnD/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.9e5a67c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.138e3449.svg\";","import React, { useState } from 'react';\nimport './App.css';\n\nimport logo from './logo.svg';\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [username, setUsername] = useState('');\n\n  const url = \"https://api.github.com/search/users?q=\";\n\n  const onChange = ev => {\n    setUsername(ev.target.value);\n  };\n\n  const onKeyPress = ev => {\n    if (ev.key === \"Enter\") {\n      searchUsers();\n    }\n  }\n\n  function timeout(ms, promise) {\n    return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        reject(new Error(\"timeout\"))\n      }, ms)\n      promise.then(resolve, reject)\n    })\n  }\n  \n  function searchUsers () {\n    fetch(`${url}${username}`)\n      .then(response => response.json())\n      .then(json => { setData(json); console.log(json) })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <div className=\"left\">\n          <img src={logo} height={30} alt=\"Github\" />\n          <div>user search</div>\n        </div>\n        <div className=\"right\">\n          <div className=\"search-box\">\n            <input className=\"search-input\" type=\"text\" onChange={onChange} onKeyPress={onKeyPress} placeholder=\"Search...\" autoFocus></input>\n            <span className=\"fa fa-search\" onClick={searchUsers}></span>\n          </div>\n        </div>\n      </div>\n      <div className=\"content\">\n       {\n         data && data.items &&\n          <div>\n            <div className=\"count\">{data.total_count} users found</div>\n            <ul className=\"user-list\">\n              {\n                data.items.map(user =>\n                <a key={user.id} className=\"user-row\" href={user.html_url} target=\"_blank\">\n                  <img src={user.avatar_url} width={40} height={40} className=\"avatar\" />\n                  <span className=\"username\">{user.login}</span>\n                </a>\n                )\n              }\n            </ul>\n          </div>\n       }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}