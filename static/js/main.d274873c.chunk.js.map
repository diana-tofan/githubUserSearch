{"version":3,"sources":["svg/logo.svg","components/Header.js","components/SearchCount.js","components/User.js","components/UserList.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","onChange","onKeyPress","searchUsers","className","src","logo","height","alt","type","placeholder","autoFocus","onClick","SearchCount","count","User","user","key","id","target","avatar_url","width","login","UserList","users","map","Modal","handleClose","isModalOpen","userDetails","showHideClassName","ev","stopPropagation","name","bio","company","location","email","class","public_repos","followers","following","URL","App","useState","searchResults","username","state","setState","fetch","then","response","json","prevState","catch","error","console","log","getUserDetails","Object","keys","length","value","items","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d274873c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.138e3449.svg\";","import React from 'react';\nimport logo from '../svg/logo.svg';\n\nexport const Header = ({ onChange, onKeyPress, searchUsers }) => \n  <div className=\"header\">\n    <div className=\"left\">\n      <img src={logo} height={30} alt=\"Github\" />\n      <div className=\"subtitle\">user search</div>\n    </div>\n    <div className=\"right\">\n      <div className=\"search-box\">\n        <input className=\"search-input\" type=\"text\" onChange={onChange} onKeyPress={onKeyPress} placeholder=\"Search...\" autoFocus></input>\n        <span className=\"fa fa-search\" onClick={searchUsers}></span>\n      </div>\n    </div>\n  </div>","import React from 'react';\n\nexport const SearchCount = ({ count }) =>\n  <div className=\"count\">{count} users found</div>\n","import React from 'react';\n\nexport const User = ({ user, onClick }) => \n  <li key={user.id} className=\"user-row\" onClick={() => onClick(user)} target=\"_blank\">\n      <img src={user.avatar_url} width={40} height={40} className=\"avatar\" alt=\"avatar\" />\n      <span className=\"username\">{user.login}</span>\n  </li>;\n","import React from 'react';\nimport { User } from './User';\n\nexport const UserList = ({ users, onClick }) =>\n  <ul className=\"user-list\">\n    { users.map(user => <User key={user.login} user={user} onClick={() => onClick(user)} />) }\n  </ul>\n","import React from 'react';\nimport '../styles/Modal.css';\nimport '../styles/UserDetails.css';\n\nexport const Modal = ({ handleClose, isModalOpen, userDetails }) => {\n  const showHideClassName = isModalOpen ? \"modal display-block\" : \"modal display-none\";\n  \n  return (\n    <div className={showHideClassName} onClick={handleClose}>\n      <section className=\"modal-main\" onClick={ev => ev.stopPropagation() }>\n        <div className=\"user-details\">\n          <div className=\"left\">\n            <img src={userDetails.avatar_url} className=\"avatar-large\" alt=\"avatar\" />\n            <div className=\"basic-info\">\n              <h3 className=\"login\">{userDetails.login}</h3>\n              { userDetails.name && <h3 className=\"name\">{userDetails.name}</h3> }\n              { userDetails.bio && <div>{userDetails.bio}</div> }\n              { userDetails.company && <div>Workplace: {userDetails.company}</div> }\n              { userDetails.location && <div>Location: {userDetails.location}</div> }\n              { userDetails.email && <div>Contact: {userDetails.email}</div> }\n            </div>\n          </div>\n          <div className=\"right\">\n            <div className=\"column\">\n              <div class=\"number\">{userDetails.public_repos}</div>\n              <div>repositories</div>\n            </div>\n            <div className=\"column\">\n              <div class=\"number\">{userDetails.followers}</div>\n              <div>followers</div>\n            </div>\n            <div className=\"column\">\n              <div class=\"number\">{userDetails.following}</div>\n              <div>following</div>\n            </div>\n          </div>\n        </div>\n        <i onClick={handleClose} className=\"fas fa-times\" />\n      </section>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport '../styles/App.css';\n\nimport { Header } from './Header';\nimport { SearchCount } from './SearchCount';\nimport { UserList } from './UserList';\nimport { Modal } from './Modal';\n\nconst URL = \"https://api.github.com/search/users?q=\";\n\nfunction App() {\n  const [state, setState] = useState({\n    searchResults: null,\n    username: '',\n    userDetails: {}\n  });\n\n  const onChange = ev => {\n    const username = ev.target.value;\n    setState(prevState => ({ ...prevState, username }));\n  };\n\n  const onKeyPress = ev => {\n    if (ev.key === \"Enter\") {\n      searchUsers();\n    }\n  }\n\n  const onClick = user => {\n    getUserDetails(user.login);\n  };\n\n  function timeout(ms, promise) {\n    return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        reject(new Error(\"timeout\"))\n      }, ms)\n      promise.then(resolve, reject)\n    })\n  }\n\n  function getUserDetails (user) {\n    const url = 'https://api.github.com/users/';\n    fetch(`${url}${user}`)\n      .then(response => response.json())\n      .then(json => {\n        setState(prevState => ({ ...prevState, userDetails: json }));\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n  \n  function searchUsers () {\n    fetch(`${URL}${state.username}`)\n      .then(response => response.json())\n      .then(json => {\n        setState(prevState => ({ ...prevState, searchResults: json }));\n        console.log(json)\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  const { userDetails } = state;\n\n  const handleClose = ev => {\n    ev.stopPropagation();\n    setState(prevState => ({ ...prevState, userDetails: {} }));\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal isModalOpen={!!Object.keys(userDetails).length} handleClose={handleClose} userDetails={userDetails} />\n      <Header onChange={onChange} onKeyPress={onKeyPress} searchUsers={searchUsers} />\n      <div className=\"content\">\n       {\n         state.searchResults && state.searchResults.items && \n          <div>\n            <SearchCount count={state.searchResults.items.length} />\n            <UserList users={state.searchResults.items} onClick={user => onClick(user)} />\n          </div>\n       }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}